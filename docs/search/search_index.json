{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"inari \u00b6 Write docstrings in Markdown! This API documents are created by inari itself. 1 2 3 4 5 # create `inari` documents! git clone https://github.com/tkamenoko/inari.git cd inari poetry install poetry run mkdocs build Features \u00b6 Minimum configuration. No dependencies by default. CLI and MkDocs Plugin . Cross reference in API documents. Docstrings Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 # sample.py \"\"\"This is a sample module.\"\"\" variable = 42 \"\"\"(`int`): Docstrings for module-level variables.\"\"\" def func ( foo : str , bar : int ) -> str : \"\"\" Docstrings for functions. **Args** * foo (`str`): First argument. * bar (`int`): Second argument. **Returns** * `str`: Type of return value. \"\"\" return foo * bar class SampleClass : \"\"\" Class docstrings. **Attributes** * baz (`str`): Docstrings for attributes. \"\"\" baz : str def __init__ ( self , b : str ): \"\"\" **Args** * b (`str`): Arguments for initializing. \"\"\" self . baz = b def method ( self , bar : int ) -> str : \"\"\" Method docstrings. Cross reference available. `sample.func` **Args** * bar(`int`) **Returns** * `str` \"\"\" return func ( self . baz , bar ) 1 2 pip install inari inari sample docs inari makes this Markdown file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 <!-- docs / sample - py . md --> # Module sample This is a sample module . ## Variables * ** variable ** {: # variable } ( ` int ` ) : Docstrings for module - level variables . ## Classes ### SampleClass {: # SampleClass } ``` python class SampleClass ( self , b : str ) ``` Class docstrings . ** Attributes ** * ** baz ** ( ` str ` ) : Docstrings for attributes . ** Args ** * ** b ** ( ` str ` ) : Arguments for initializing . ------ #### Methods {: # SampleClass - methods } [ ** method ** ] ( # SampleClass . method ) {: # SampleClass . method } ``` python def method ( self , bar : int ) -> str ``` Method docstrings . Cross reference available . [` func `] ( . / # func ) ** Args ** * ** bar ** ( ` int ` ) ** Returns ** * ` str ` ## Functions ### func {: # func } ``` python def func ( foo : str , bar : int ) -> str ``` Docstrings for functions . ** Args ** * ** foo ** ( ` str ` ) : First argument . * ** bar ** ( ` int ` ) : Second argument . ** Returns ** * ` str `: Type of return value . License \u00b6 MIT","title":"Home"},{"location":"#inari","text":"Write docstrings in Markdown! This API documents are created by inari itself. 1 2 3 4 5 # create `inari` documents! git clone https://github.com/tkamenoko/inari.git cd inari poetry install poetry run mkdocs build","title":"inari"},{"location":"#features","text":"Minimum configuration. No dependencies by default. CLI and MkDocs Plugin . Cross reference in API documents.","title":"Features"},{"location":"#docstrings-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 # sample.py \"\"\"This is a sample module.\"\"\" variable = 42 \"\"\"(`int`): Docstrings for module-level variables.\"\"\" def func ( foo : str , bar : int ) -> str : \"\"\" Docstrings for functions. **Args** * foo (`str`): First argument. * bar (`int`): Second argument. **Returns** * `str`: Type of return value. \"\"\" return foo * bar class SampleClass : \"\"\" Class docstrings. **Attributes** * baz (`str`): Docstrings for attributes. \"\"\" baz : str def __init__ ( self , b : str ): \"\"\" **Args** * b (`str`): Arguments for initializing. \"\"\" self . baz = b def method ( self , bar : int ) -> str : \"\"\" Method docstrings. Cross reference available. `sample.func` **Args** * bar(`int`) **Returns** * `str` \"\"\" return func ( self . baz , bar ) 1 2 pip install inari inari sample docs inari makes this Markdown file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 <!-- docs / sample - py . md --> # Module sample This is a sample module . ## Variables * ** variable ** {: # variable } ( ` int ` ) : Docstrings for module - level variables . ## Classes ### SampleClass {: # SampleClass } ``` python class SampleClass ( self , b : str ) ``` Class docstrings . ** Attributes ** * ** baz ** ( ` str ` ) : Docstrings for attributes . ** Args ** * ** b ** ( ` str ` ) : Arguments for initializing . ------ #### Methods {: # SampleClass - methods } [ ** method ** ] ( # SampleClass . method ) {: # SampleClass . method } ``` python def method ( self , bar : int ) -> str ``` Method docstrings . Cross reference available . [` func `] ( . / # func ) ** Args ** * ** bar ** ( ` int ` ) ** Returns ** * ` str ` ## Functions ### func {: # func } ``` python def func ( foo : str , bar : int ) -> str ``` Docstrings for functions . ** Args ** * ** foo ** ( ` str ` ) : First argument . * ** bar ** ( ` int ` ) : Second argument . ** Returns ** * ` str `: Type of return value .","title":"Docstrings Example"},{"location":"#license","text":"MIT","title":"License"},{"location":"docstrings-syntax/","text":"Docstrings Syntax \u00b6 You can use any Markdown syntax, and inari provides some additional features. List Arguments/Attributes \u00b6 To list arguments or attributes, use * . inari emphasises these name automatically. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def func ( alpha : str , bata : str ) -> str : \"\"\" Sample function. **Args** * alpha (`str`): Explain `alpha` . * bata (`str`): Explain `bata` . **Returns** * `str`: Return type. \"\"\" return alpha + bata That will be converted to this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## Functions ### func ``` python def func ( alpha : str , bata : str ) -> str : ``` Sample function . ** Args ** * ** alpha ** ( ` str ` ) : Explain ` alpha ` . * ** bata ** ( ` str ` ) : Explain ` bata ` . ** Returns ** * ` str `: Return type . Cross Reference \u00b6 inari generates cross reference in API documents. module.submodule.function will be converted to appropriate relative link like [`function `](../submodule#function) . Note If you installed inari without MkDocs , you have to install Python-Markdown and enable Attribute Lists extention to create hash anchors. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # `module/submodule.py` def func ( alpha : str , bata : str ) -> str : \"\"\" Link to some method like `module.anothermodule.SampleClass.some_method` \"\"\" return alpha + bata # `module/anothermodule.py` class SampleClass : \"\"\" Make reference like `module.submodule.func` \"\"\" def some_method ( self ): pass inari make hyperlink like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <! -- docs/module/submodule-py.md --> # Module module . submodule ## Functions ### func { : # func } ``` python def func ( alpha : str , bata : str ) -> str ``` Link to some method like [ ` SampleClass . some_method ` ](.. / anothermodule - py # SampleClass . some_method ) <! -- docs/module/anothermodule-py.md --> # Module module . anothermodule ## Classes ### SampleClass { : # SampleClass } ``` python class SampleClass () ``` Make reference like [ ` func ` ](.. / submodule - py # func ) ------ #### Methods { : # SampleClass - methods } [ ** some_method ** ]( # SampleClass . some_method ) { : # SampleClass . some_method } ``` python def some_method ( self ) ```","title":"Docstrings Syntax"},{"location":"docstrings-syntax/#docstrings-syntax","text":"You can use any Markdown syntax, and inari provides some additional features.","title":"Docstrings Syntax"},{"location":"docstrings-syntax/#list-argumentsattributes","text":"To list arguments or attributes, use * . inari emphasises these name automatically. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def func ( alpha : str , bata : str ) -> str : \"\"\" Sample function. **Args** * alpha (`str`): Explain `alpha` . * bata (`str`): Explain `bata` . **Returns** * `str`: Return type. \"\"\" return alpha + bata That will be converted to this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## Functions ### func ``` python def func ( alpha : str , bata : str ) -> str : ``` Sample function . ** Args ** * ** alpha ** ( ` str ` ) : Explain ` alpha ` . * ** bata ** ( ` str ` ) : Explain ` bata ` . ** Returns ** * ` str `: Return type .","title":"List Arguments/Attributes"},{"location":"docstrings-syntax/#cross-reference","text":"inari generates cross reference in API documents. module.submodule.function will be converted to appropriate relative link like [`function `](../submodule#function) . Note If you installed inari without MkDocs , you have to install Python-Markdown and enable Attribute Lists extention to create hash anchors. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # `module/submodule.py` def func ( alpha : str , bata : str ) -> str : \"\"\" Link to some method like `module.anothermodule.SampleClass.some_method` \"\"\" return alpha + bata # `module/anothermodule.py` class SampleClass : \"\"\" Make reference like `module.submodule.func` \"\"\" def some_method ( self ): pass inari make hyperlink like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <! -- docs/module/submodule-py.md --> # Module module . submodule ## Functions ### func { : # func } ``` python def func ( alpha : str , bata : str ) -> str ``` Link to some method like [ ` SampleClass . some_method ` ](.. / anothermodule - py # SampleClass . some_method ) <! -- docs/module/anothermodule-py.md --> # Module module . anothermodule ## Classes ### SampleClass { : # SampleClass } ``` python class SampleClass () ``` Make reference like [ ` func ` ](.. / submodule - py # func ) ------ #### Methods { : # SampleClass - methods } [ ** some_method ** ]( # SampleClass . some_method ) { : # SampleClass . some_method } ``` python def some_method ( self ) ```","title":"Cross Reference"},{"location":"getting-started/","text":"Getting Started \u00b6 Install \u00b6 1 pip install inari Use CLI \u00b6 1 inari <module-name> <out-dir> [ -n <out-name> ] module-name : Target module to make documents. out-dir : Directory to put documents. out-name : Top level directory/file name. module-name is used by default. Use MkDocs Plugin \u00b6 First, install with MkDocs . 1 pip install inari [ mkdocs ] Initialize project. 1 2 mkdocs new my-project cd my-project Then, fix mkdocs.yml . 1 2 3 4 5 6 7 8 9 10 site_name : My Docs docs_dir : \"docs\" # same as default plugins : - search # MkDocs default plugin - inari : module : <module-name> # required out-name : api # optional. Default : <module-name> # no `out-dir` option because `inari` uses `docs_dir` in the config. After that, running mkdocs build will generate your API documents in docs/api .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install","text":"1 pip install inari","title":"Install"},{"location":"getting-started/#use-cli","text":"1 inari <module-name> <out-dir> [ -n <out-name> ] module-name : Target module to make documents. out-dir : Directory to put documents. out-name : Top level directory/file name. module-name is used by default.","title":"Use CLI"},{"location":"getting-started/#use-mkdocs-plugin","text":"First, install with MkDocs . 1 pip install inari [ mkdocs ] Initialize project. 1 2 mkdocs new my-project cd my-project Then, fix mkdocs.yml . 1 2 3 4 5 6 7 8 9 10 site_name : My Docs docs_dir : \"docs\" # same as default plugins : - search # MkDocs default plugin - inari : module : <module-name> # required out-name : api # optional. Default : <module-name> # no `out-dir` option because `inari` uses `docs_dir` in the config. After that, running mkdocs build will generate your API documents in docs/api .","title":"Use MkDocs Plugin"},{"location":"api/","text":"Module inari \u00b6 inari \u2014 Write docstrings in Markdown! Submodules \u00b6 inari.cli inari.mkdocs_plugin inari.structs","title":"inari"},{"location":"api/#module-inari","text":"inari \u2014 Write docstrings in Markdown!","title":"Module inari"},{"location":"api/#submodules","text":"inari.cli inari.mkdocs_plugin inari.structs","title":"Submodules"},{"location":"api/cli-py/","text":"Module inari.cli \u00b6 Functions \u00b6 run \u00b6 1 def run () CLI entry point.","title":"cli"},{"location":"api/cli-py/#module-inaricli","text":"","title":"Module inari.cli"},{"location":"api/cli-py/#functions","text":"","title":"Functions"},{"location":"api/cli-py/#run","text":"1 def run () CLI entry point.","title":"run"},{"location":"api/mkdocs_plugin-py/","text":"Module inari.mkdocs_plugin \u00b6 Classes \u00b6 Plugin \u00b6 1 class Plugin () MkDocs Plugin class. Base classes \u00b6 mkdocs.BasePlugin Methods \u00b6 on_config 1 def on_config ( self , config ) on_files 1 def on_files ( self , files , config ) on_serve 1 def on_serve ( self , server , config )","title":"mkdocs_plugin"},{"location":"api/mkdocs_plugin-py/#module-inarimkdocs_plugin","text":"","title":"Module inari.mkdocs_plugin"},{"location":"api/mkdocs_plugin-py/#classes","text":"","title":"Classes"},{"location":"api/mkdocs_plugin-py/#Plugin","text":"1 class Plugin () MkDocs Plugin class.","title":"Plugin"},{"location":"api/mkdocs_plugin-py/#Plugin-bases","text":"mkdocs.BasePlugin","title":"Base classes"},{"location":"api/mkdocs_plugin-py/#Plugin-methods","text":"on_config 1 def on_config ( self , config ) on_files 1 def on_files ( self , files , config ) on_serve 1 def on_serve ( self , server , config )","title":"Methods"},{"location":"api/structs-py/","text":"Module inari.structs \u00b6 Classes \u00b6 BaseStruct \u00b6 1 class BaseStruct ( self , abs_path = \"\" , name_to_path : dict = None ) Base class for collecting objects with docstrings. Attributes name_to_path ( dict ): Mapping of {\"module.name.class\": \"module/name#class\"} . doc ( str ): Docstrings of the object. abs_path ( str ): Absolute path of the object. Root is out_dir . Args abs_path ( str ): Absolute path of the object. name_to_path ( dict ): Mapping of name and path. Methods \u00b6 doc_str 1 def doc_str ( self ) -> str Create documents from its contents. ClsStruct \u00b6 1 class ClsStruct ( self , cls : type , abs_path : str , name_to_path : dict ) Class with methods and properties. Attribute docs should be written in class docstring like this: Attributes cls ( type ): Target class. vars ( List[VarStruct] ): Class properties. methods ( List[FuncStruct] ): Methods of the class. hash_ ( str ): Used for HTML id. Args cls ( type ): Class to make documents. abs_path ( str ): See BaseStruct . name_to_path ( str ): See BaseStruct . Base classes \u00b6 BaseStruct Methods \u00b6 doc_str 1 def doc_str ( self ) -> str Create documents from its contents. init_methods 1 def init_methods ( self ) init_vars 1 def init_vars ( self ) FuncStruct \u00b6 1 class FuncStruct ( self , f : Callable , name_to_path : dict , abs_path : str ) Functions and methods. Attributes func ( Callable ): Target function. hash_ ( str ): Used for HTML id. Args f ( Callable ): Target function. abs_path ( str ): See BaseStruct . name_to_path ( str ): See BaseStruct . Base classes \u00b6 BaseStruct Methods \u00b6 doc_str 1 def doc_str ( self ) -> str Create documents from its contents. ModStruct \u00b6 1 2 3 4 5 6 class ModStruct ( self , mod : ModuleType , out_dir : Union [ str , pathlib . Path ], name_to_path : dict = None , out_name : str = None ,) Module docs, submodules, classes, funcs, and variables. test: run Attributes mod ( ModuleType ): Module to make documents. submods ( List[ModStruct] ): List of submodules, wrapped by ModStruct . vars ( List[VarStruct] ): List of module-level variables, wrapped by VarStruct . classes ( List[ClsStruct] ): List of public classes, wrapped by ClsStruct . funcs ( List[FuncStruct] ): List of public functions, wrapped by FuncStruct . out_dir ( pathlib.Path ): Output directly. filename ( str ): Output filename, like index.md , submodule.md . relpaths ( dict ): Store relational paths. See ModStruct.make_relpaths . Args mod ( ModuleType ): Module to make documents. out_dir ( Union[str,Path] ): Output directoly. name_to_path ( dict ): See BaseStruct . out_name ( str ): If given, name of output file/directoly will be orverridden. Base classes \u00b6 BaseStruct Methods \u00b6 doc_str 1 def doc_str ( self ) -> str Create documents from its contents. init_classes 1 def init_classes ( self ) Find public classes defined in the module. init_funcs 1 def init_funcs ( self ) Find public functions in the module. init_vars 1 def init_vars ( self ) Find variables having docstrings. make_links 1 def make_links ( self , doc : str ) -> str Create internal link on back-quoted name. To ignore this, append a space like \"foo.bar \" . make_relpaths 1 def make_relpaths ( self ) Create mapping between object name to relative path. 1 `ful.path.to.mod.cls` -> [ `cls` ](.. / .. / mod #cls) write 1 def write ( self ) Write documents to files. Directories are created automatically. VarStruct \u00b6 1 class VarStruct ( self , var , name_to_path : dict , abs_path : str , name : str = None , doc : str = None ) Module variables and class properties. Attributes var : Module-level object or class property, not module/class/function. name ( str ): Name of the object. Args var : Target object. name_to_path ( dict ): See BaseStruct . abs_path ( str ): See BaseStruct . name ( str ): Fallback of var.__name__ . doc ( str ): Fallback of inspect.getdoc(var) . Base classes \u00b6 BaseStruct Methods \u00b6 doc_str 1 def doc_str ( self ) -> str Create documents from its contents. Functions \u00b6 is_var \u00b6 1 def is_var ( obj ) -> bool Utility for filtering unexpected objects.","title":"structs"},{"location":"api/structs-py/#module-inaristructs","text":"","title":"Module inari.structs"},{"location":"api/structs-py/#classes","text":"","title":"Classes"},{"location":"api/structs-py/#BaseStruct","text":"1 class BaseStruct ( self , abs_path = \"\" , name_to_path : dict = None ) Base class for collecting objects with docstrings. Attributes name_to_path ( dict ): Mapping of {\"module.name.class\": \"module/name#class\"} . doc ( str ): Docstrings of the object. abs_path ( str ): Absolute path of the object. Root is out_dir . Args abs_path ( str ): Absolute path of the object. name_to_path ( dict ): Mapping of name and path.","title":"BaseStruct"},{"location":"api/structs-py/#BaseStruct-methods","text":"doc_str 1 def doc_str ( self ) -> str Create documents from its contents.","title":"Methods"},{"location":"api/structs-py/#ClsStruct","text":"1 class ClsStruct ( self , cls : type , abs_path : str , name_to_path : dict ) Class with methods and properties. Attribute docs should be written in class docstring like this: Attributes cls ( type ): Target class. vars ( List[VarStruct] ): Class properties. methods ( List[FuncStruct] ): Methods of the class. hash_ ( str ): Used for HTML id. Args cls ( type ): Class to make documents. abs_path ( str ): See BaseStruct . name_to_path ( str ): See BaseStruct .","title":"ClsStruct"},{"location":"api/structs-py/#ClsStruct-bases","text":"BaseStruct","title":"Base classes"},{"location":"api/structs-py/#ClsStruct-methods","text":"doc_str 1 def doc_str ( self ) -> str Create documents from its contents. init_methods 1 def init_methods ( self ) init_vars 1 def init_vars ( self )","title":"Methods"},{"location":"api/structs-py/#FuncStruct","text":"1 class FuncStruct ( self , f : Callable , name_to_path : dict , abs_path : str ) Functions and methods. Attributes func ( Callable ): Target function. hash_ ( str ): Used for HTML id. Args f ( Callable ): Target function. abs_path ( str ): See BaseStruct . name_to_path ( str ): See BaseStruct .","title":"FuncStruct"},{"location":"api/structs-py/#FuncStruct-bases","text":"BaseStruct","title":"Base classes"},{"location":"api/structs-py/#FuncStruct-methods","text":"doc_str 1 def doc_str ( self ) -> str Create documents from its contents.","title":"Methods"},{"location":"api/structs-py/#ModStruct","text":"1 2 3 4 5 6 class ModStruct ( self , mod : ModuleType , out_dir : Union [ str , pathlib . Path ], name_to_path : dict = None , out_name : str = None ,) Module docs, submodules, classes, funcs, and variables. test: run Attributes mod ( ModuleType ): Module to make documents. submods ( List[ModStruct] ): List of submodules, wrapped by ModStruct . vars ( List[VarStruct] ): List of module-level variables, wrapped by VarStruct . classes ( List[ClsStruct] ): List of public classes, wrapped by ClsStruct . funcs ( List[FuncStruct] ): List of public functions, wrapped by FuncStruct . out_dir ( pathlib.Path ): Output directly. filename ( str ): Output filename, like index.md , submodule.md . relpaths ( dict ): Store relational paths. See ModStruct.make_relpaths . Args mod ( ModuleType ): Module to make documents. out_dir ( Union[str,Path] ): Output directoly. name_to_path ( dict ): See BaseStruct . out_name ( str ): If given, name of output file/directoly will be orverridden.","title":"ModStruct"},{"location":"api/structs-py/#ModStruct-bases","text":"BaseStruct","title":"Base classes"},{"location":"api/structs-py/#ModStruct-methods","text":"doc_str 1 def doc_str ( self ) -> str Create documents from its contents. init_classes 1 def init_classes ( self ) Find public classes defined in the module. init_funcs 1 def init_funcs ( self ) Find public functions in the module. init_vars 1 def init_vars ( self ) Find variables having docstrings. make_links 1 def make_links ( self , doc : str ) -> str Create internal link on back-quoted name. To ignore this, append a space like \"foo.bar \" . make_relpaths 1 def make_relpaths ( self ) Create mapping between object name to relative path. 1 `ful.path.to.mod.cls` -> [ `cls` ](.. / .. / mod #cls) write 1 def write ( self ) Write documents to files. Directories are created automatically.","title":"Methods"},{"location":"api/structs-py/#VarStruct","text":"1 class VarStruct ( self , var , name_to_path : dict , abs_path : str , name : str = None , doc : str = None ) Module variables and class properties. Attributes var : Module-level object or class property, not module/class/function. name ( str ): Name of the object. Args var : Target object. name_to_path ( dict ): See BaseStruct . abs_path ( str ): See BaseStruct . name ( str ): Fallback of var.__name__ . doc ( str ): Fallback of inspect.getdoc(var) .","title":"VarStruct"},{"location":"api/structs-py/#VarStruct-bases","text":"BaseStruct","title":"Base classes"},{"location":"api/structs-py/#VarStruct-methods","text":"doc_str 1 def doc_str ( self ) -> str Create documents from its contents.","title":"Methods"},{"location":"api/structs-py/#functions","text":"","title":"Functions"},{"location":"api/structs-py/#is_var","text":"1 def is_var ( obj ) -> bool Utility for filtering unexpected objects.","title":"is_var"}]}