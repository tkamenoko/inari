{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"inari \u00b6 Write docstrings in Markdown! This API documents are created by inari itself. # create `inari` documents! git clone https://github.com/tkamenoko/inari.git cd inari poetry install poetry run mkdocs build Features \u00b6 Minimum configuration. No dependencies by default(but MkDocs is recommended!). CLI and MkDocs Plugin . Cross reference in API documents. Install \u00b6 pip install inari [ mkdocs ] Example \u00b6 # sample.py \"\"\"This is a sample module.\"\"\" variable = 42 \"\"\"(`int`): Docstrings for module-level variables.\"\"\" def func ( foo : str , bar : int ) -> str : \"\"\" Docstrings for functions. **Args** * foo (`str`): First argument. * bar (`int`): Second argument. **Returns** * `str`: Type of return value. \"\"\" return foo * bar class SampleClass : \"\"\" Class docstrings. **Attributes** * baz (`str`): Docstrings for attributes. \"\"\" baz : str def __init__ ( self , b : str ): \"\"\" **Args** * b (`str`): Arguments for initializing. \"\"\" self . baz = b def method ( self , bar : int ) -> str : \"\"\" Method docstrings. Cross reference available. `sample.func` **Args** * bar(`int`) **Returns** * `str` \"\"\" return func ( self . baz , bar ) inari sample docs inari makes this Markdown file: <!-- docs/sample-py.md --> # Module sample This is a sample module. ## Variables - **variable** {: #variable } ( `int` ): Docstrings for module-level variables. ## Classes ### SampleClass {: #SampleClass } ```python class SampleClass ( self , b : str ) ``` Class docstrings. **Attributes** - **baz** ( `str` ): Docstrings for attributes. **Args** - **b** ( `str` ): Arguments for initializing. --- #### Methods {: #SampleClass-methods } [ **method** ](#SampleClass.method){: #SampleClass .method } ```python def method ( self , bar : int ) -> str ``` Method docstrings. Cross reference available. [ `func ` ](#func) **Args** - **bar** ( `int` ) **Returns** - `str` ## Functions ### func {: #func } ```python def func ( foo : str , bar : int ) -> str ``` Docstrings for functions. **Args** - **foo** ( `str` ): First argument. - **bar** ( `int` ): Second argument. **Returns** - `str` : Type of return value. License \u00b6 MIT","title":"Home"},{"location":"#inari","text":"Write docstrings in Markdown! This API documents are created by inari itself. # create `inari` documents! git clone https://github.com/tkamenoko/inari.git cd inari poetry install poetry run mkdocs build","title":"inari"},{"location":"#features","text":"Minimum configuration. No dependencies by default(but MkDocs is recommended!). CLI and MkDocs Plugin . Cross reference in API documents.","title":"Features"},{"location":"#install","text":"pip install inari [ mkdocs ]","title":"Install"},{"location":"#example","text":"# sample.py \"\"\"This is a sample module.\"\"\" variable = 42 \"\"\"(`int`): Docstrings for module-level variables.\"\"\" def func ( foo : str , bar : int ) -> str : \"\"\" Docstrings for functions. **Args** * foo (`str`): First argument. * bar (`int`): Second argument. **Returns** * `str`: Type of return value. \"\"\" return foo * bar class SampleClass : \"\"\" Class docstrings. **Attributes** * baz (`str`): Docstrings for attributes. \"\"\" baz : str def __init__ ( self , b : str ): \"\"\" **Args** * b (`str`): Arguments for initializing. \"\"\" self . baz = b def method ( self , bar : int ) -> str : \"\"\" Method docstrings. Cross reference available. `sample.func` **Args** * bar(`int`) **Returns** * `str` \"\"\" return func ( self . baz , bar ) inari sample docs inari makes this Markdown file: <!-- docs/sample-py.md --> # Module sample This is a sample module. ## Variables - **variable** {: #variable } ( `int` ): Docstrings for module-level variables. ## Classes ### SampleClass {: #SampleClass } ```python class SampleClass ( self , b : str ) ``` Class docstrings. **Attributes** - **baz** ( `str` ): Docstrings for attributes. **Args** - **b** ( `str` ): Arguments for initializing. --- #### Methods {: #SampleClass-methods } [ **method** ](#SampleClass.method){: #SampleClass .method } ```python def method ( self , bar : int ) -> str ``` Method docstrings. Cross reference available. [ `func ` ](#func) **Args** - **bar** ( `int` ) **Returns** - `str` ## Functions ### func {: #func } ```python def func ( foo : str , bar : int ) -> str ``` Docstrings for functions. **Args** - **foo** ( `str` ): First argument. - **bar** ( `int` ): Second argument. **Returns** - `str` : Type of return value.","title":"Example"},{"location":"#license","text":"MIT","title":"License"},{"location":"SUMMARY/","text":"Home Getting Started Docstrings Syntax API","title":"SUMMARY"},{"location":"docstrings-syntax/","text":"Docstrings Syntax \u00b6 You can use any Markdown syntax, and inari provides some additional features. List Arguments/Attributes \u00b6 inari emphasizes names of listed arguments automatically. Example: def func ( alpha : str , beta : str ) -> str : \"\"\" Sample function. **Args** * alpha (`str`): Explain `alpha` . * beta (`str`): Explain `beta` . **Returns** * `str`: Return type. \"\"\" return alpha + beta That will be converted to this: ## Functions ### func ```python def func ( alpha : str , beta : str ) -> str ``` Sample function. **Args** - **alpha** ( `str` ): Explain `alpha` . - **beta** ( `str` ): Explain `beta` . **Returns** - `str` : Return type. Cross Reference \u00b6 inari generates cross reference in API documents. module.submodule.function will be converted to appropriate relative link like [`function `](submodule.md#function) . Note If you installed inari without MkDocs , you have to install Python-Markdown and enable Attribute Lists extension to create hash anchors. Example: # `module/submodule.py` def func ( alpha : str , bata : str ) -> str : \"\"\" Link to some method like `module.anothermodule.SampleClass.some_method` \"\"\" return alpha + bata # `module/anothermodule.py` class SampleClass : \"\"\" Make reference like `module.submodule.func` \"\"\" def some_method ( self ): pass inari makes hyperlink like this: <!-- docs/module/submodule-py.md --> # Module module.submodule ## Functions ### func {: #func } ```python def func ( alpha : str , bata : str ) -> str ``` Link to some method like [ `SampleClass.some_method ` ](anothermodule-py.md#SampleClass.some_method) <!-- docs/module/anothermodule-py.md --> # Module module.anothermodule ## Classes ### SampleClass {: #SampleClass } ```python class SampleClass () ``` Make reference like [ `func ` ](submodule-py.md#func) --- #### Methods {: #SampleClass-methods } [ **some_method** ](#SampleClass.some_method){: #SampleClass .some_method } ```python def some_method ( self ) ```","title":"Docstrings Syntax"},{"location":"docstrings-syntax/#docstrings-syntax","text":"You can use any Markdown syntax, and inari provides some additional features.","title":"Docstrings Syntax"},{"location":"docstrings-syntax/#list-argumentsattributes","text":"inari emphasizes names of listed arguments automatically. Example: def func ( alpha : str , beta : str ) -> str : \"\"\" Sample function. **Args** * alpha (`str`): Explain `alpha` . * beta (`str`): Explain `beta` . **Returns** * `str`: Return type. \"\"\" return alpha + beta That will be converted to this: ## Functions ### func ```python def func ( alpha : str , beta : str ) -> str ``` Sample function. **Args** - **alpha** ( `str` ): Explain `alpha` . - **beta** ( `str` ): Explain `beta` . **Returns** - `str` : Return type.","title":"List Arguments/Attributes"},{"location":"docstrings-syntax/#cross-reference","text":"inari generates cross reference in API documents. module.submodule.function will be converted to appropriate relative link like [`function `](submodule.md#function) . Note If you installed inari without MkDocs , you have to install Python-Markdown and enable Attribute Lists extension to create hash anchors. Example: # `module/submodule.py` def func ( alpha : str , bata : str ) -> str : \"\"\" Link to some method like `module.anothermodule.SampleClass.some_method` \"\"\" return alpha + bata # `module/anothermodule.py` class SampleClass : \"\"\" Make reference like `module.submodule.func` \"\"\" def some_method ( self ): pass inari makes hyperlink like this: <!-- docs/module/submodule-py.md --> # Module module.submodule ## Functions ### func {: #func } ```python def func ( alpha : str , bata : str ) -> str ``` Link to some method like [ `SampleClass.some_method ` ](anothermodule-py.md#SampleClass.some_method) <!-- docs/module/anothermodule-py.md --> # Module module.anothermodule ## Classes ### SampleClass {: #SampleClass } ```python class SampleClass () ``` Make reference like [ `func ` ](submodule-py.md#func) --- #### Methods {: #SampleClass-methods } [ **some_method** ](#SampleClass.some_method){: #SampleClass .some_method } ```python def some_method ( self ) ```","title":"Cross Reference"},{"location":"getting-started/","text":"Getting Started \u00b6 Install \u00b6 pip install inari Use CLI \u00b6 inari <module-name> <out-dir> [ -n <out-name> ] [ -y ] Arguments \u00b6 module-name : Target module to make documents. out-dir : Directory to put documents. Options \u00b6 --name (-n) : Top level directory/file name. module-name is used by default. --enable-yaml-header(-y) : A flag for deciding whether to include yaml header. Default: False . Use MkDocs Plugin \u00b6 First, install with MkDocs . pip install inari [ mkdocs ] Initialize project. mkdocs new my-project cd my-project Then, fix mkdocs.yml . site_name : My Docs docs_dir : \"docs\" # same as default plugins : - search # MkDocs default plugin - inari : module : <module-name> # required out-name : api # optional. Default: <module-name> # no `out-dir` option because `inari` uses `docs_dir` in the config. After that, running mkdocs build will generate your API documents in docs/api .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install","text":"pip install inari","title":"Install"},{"location":"getting-started/#use-cli","text":"inari <module-name> <out-dir> [ -n <out-name> ] [ -y ]","title":"Use CLI"},{"location":"getting-started/#arguments","text":"module-name : Target module to make documents. out-dir : Directory to put documents.","title":"Arguments"},{"location":"getting-started/#options","text":"--name (-n) : Top level directory/file name. module-name is used by default. --enable-yaml-header(-y) : A flag for deciding whether to include yaml header. Default: False .","title":"Options"},{"location":"getting-started/#use-mkdocs-plugin","text":"First, install with MkDocs . pip install inari [ mkdocs ] Initialize project. mkdocs new my-project cd my-project Then, fix mkdocs.yml . site_name : My Docs docs_dir : \"docs\" # same as default plugins : - search # MkDocs default plugin - inari : module : <module-name> # required out-name : api # optional. Default: <module-name> # no `out-dir` option because `inari` uses `docs_dir` in the config. After that, running mkdocs build will generate your API documents in docs/api .","title":"Use MkDocs Plugin"},{"location":"api/","text":"Module inari \u00b6 inari - Write docstrings in Markdown! Submodules \u00b6 inari.cli inari.collectors inari.mkdocs_plugin","title":"inari"},{"location":"api/#module-inari","text":"inari - Write docstrings in Markdown!","title":"Module inari"},{"location":"api/#submodules","text":"inari.cli inari.collectors inari.mkdocs_plugin","title":"Submodules"},{"location":"api/cli-py/","text":"Module inari.cli \u00b6 Functions \u00b6 run \u00b6 def run () -> None CLI entry point.","title":"inari.cli"},{"location":"api/cli-py/#module-inaricli","text":"","title":"Module inari.cli"},{"location":"api/cli-py/#functions","text":"","title":"Functions"},{"location":"api/cli-py/#run","text":"def run () -> None CLI entry point.","title":"run"},{"location":"api/collectors-py/","text":"Module inari.collectors \u00b6 collectors - Store module members, and build markdown documents from docstrings. Classes \u00b6 BaseCollector \u00b6 class BaseCollector ( self , abs_path : str = \"\" , name_to_path : Optional [ dict [ str , str ]] = None ) Base class for collecting objects with docstrings. Attributes name_to_path ( dict[str, str] ): Mapping of {\"module.name.class\": \"module/name#class\"} . doc ( str ): Docstrings of the object. abs_path ( str ): Absolute path of the object. Args abs_path ( str ): Absolute path of the object. name_to_path ( dict[str, str] ): Mapping of name and path. Methods \u00b6 doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations. ClassCollector \u00b6 class ClassCollector ( self , cls : type , abs_path : str , name_to_path : dict [ str , str ]) Class with methods and properties. Attribute docs should be written in class docstring like this: Attributes cls ( type ): Target class. variables ( list[VariableCollector] ): Class properties. methods ( list[FunctionCollector] ): Methods of the class. hash_ ( str ): Used for HTML id. Args cls ( type ): Class to make documents. abs_path ( str ): See BaseCollector . name_to_path ( dict[str, str] ): See BaseCollector . Base classes \u00b6 BaseCollector Methods \u00b6 doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations. init_methods def init_methods ( self ) -> None init_variables def init_variables ( self ) -> None FunctionCollector \u00b6 class FunctionCollector ( self , f : Callable [ ... , Any ], name_to_path : dict [ str , str ], abs_path : str ) Functions and methods. Attributes function ( Callable[..., Any] ): Target function. hash_ ( str ): Used for HTML id. Args f ( Callable[..., Any] ): Target function. abs_path ( str ): See BaseCollector . name_to_path ( dict[str, str] ): See BaseCollector . Base classes \u00b6 BaseCollector Methods \u00b6 doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations. ModuleCollector \u00b6 class ModuleCollector ( self , mod : ModuleType , out_dir : Union [ str , os . PathLike [ str ]], name_to_path : Optional [ dict [ str , str ]] = None , out_name : Optional [ str ] = None , enable_yaml_header : bool = False ,) Module docs, submodules, classes, functions, and variables. Attributes mod ( ModuleType ): Module to make documents. submodules ( dict[str, ModuleCollector] ): key-value pair of paths and submodules, wrapped by ModuleCollector . variables ( list[VariableCollector] ): list of module-level variables, wrapped by VariableCollector . classes ( list[ClassCollector] ): list of public classes, wrapped by ClassCollector . functions ( list[FunctionCollector] ): list of public functions, wrapped by FunctionCollector . out_dir ( pathlib.Path ): Output directly. filename ( str ): Output filename, like index.md , submodule.md . relpaths ( dict[str, tuple[str, str]] ): Store relational paths. See inari.collectors.ModuleCollector.make_relpaths . enable_yaml_header ( bool ): a flag for deciding whether to include yaml header. Args mod ( ModuleType ): Module to make documents. out_dir ( Union[str, Path] ): Output directory. name_to_path ( dict ): See BaseCollector . out_name ( str ): Output file name. enable_yaml_header ( bool ): a flag for deciding whether to include yaml header. Base classes \u00b6 BaseCollector Methods \u00b6 doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations. init_classes def init_classes ( self ) -> None Find public classes defined in the module. init_functions def init_functions ( self ) -> None Find public functions in the module. init_submodules def init_submodules ( self ) -> None Find submodules. init_vars def init_vars ( self ) -> None Find variables having docstrings. make_links def make_links ( self , doc : str ) -> str Create internal link on back-quoted name. To ignore this, append a space like \"foo.bar \" . make_relpaths def make_relpaths ( self ) -> None Create mapping between object name to relative path. `ful.path.to.mod.cls` -> [ `cls` ](../../mod.md#cls) make_yaml_header def make_yaml_header ( self ) -> str Make yaml header from given values. remove_old_submodules def remove_old_submodules ( self ) -> None Remove documents and collectors of deleted modules. write def write ( self ) -> None Write documents to files. Directories are created automatically. VariableCollector \u00b6 class VariableCollector ( self , var : object , name_to_path : dict [ str , str ], abs_path : str , name : Optional [ str ] = None , doc : Optional [ str ] = None ,) Module variables and class properties. Attributes var : Module-level object or class property, not module/class/function. name ( str ): Name of the object. Args var ( object ): Target object. name_to_path ( dict[str, str] ): See BaseCollector . abs_path ( str ): See BaseCollector . name ( str ): Fallback of var.__name__ . doc ( str ): Fallback of inspect.getdoc(var) . Base classes \u00b6 BaseCollector Methods \u00b6 doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations. Functions \u00b6 is_var \u00b6 def is_var ( obj : object ) -> bool Utility for filtering unexpected objects.","title":"inari.collectors"},{"location":"api/collectors-py/#module-inaricollectors","text":"collectors - Store module members, and build markdown documents from docstrings.","title":"Module inari.collectors"},{"location":"api/collectors-py/#classes","text":"","title":"Classes"},{"location":"api/collectors-py/#BaseCollector","text":"class BaseCollector ( self , abs_path : str = \"\" , name_to_path : Optional [ dict [ str , str ]] = None ) Base class for collecting objects with docstrings. Attributes name_to_path ( dict[str, str] ): Mapping of {\"module.name.class\": \"module/name#class\"} . doc ( str ): Docstrings of the object. abs_path ( str ): Absolute path of the object. Args abs_path ( str ): Absolute path of the object. name_to_path ( dict[str, str] ): Mapping of name and path.","title":"BaseCollector"},{"location":"api/collectors-py/#BaseCollector-methods","text":"doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations.","title":"Methods"},{"location":"api/collectors-py/#ClassCollector","text":"class ClassCollector ( self , cls : type , abs_path : str , name_to_path : dict [ str , str ]) Class with methods and properties. Attribute docs should be written in class docstring like this: Attributes cls ( type ): Target class. variables ( list[VariableCollector] ): Class properties. methods ( list[FunctionCollector] ): Methods of the class. hash_ ( str ): Used for HTML id. Args cls ( type ): Class to make documents. abs_path ( str ): See BaseCollector . name_to_path ( dict[str, str] ): See BaseCollector .","title":"ClassCollector"},{"location":"api/collectors-py/#ClassCollector-bases","text":"BaseCollector","title":"Base classes"},{"location":"api/collectors-py/#ClassCollector-methods","text":"doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations. init_methods def init_methods ( self ) -> None init_variables def init_variables ( self ) -> None","title":"Methods"},{"location":"api/collectors-py/#FunctionCollector","text":"class FunctionCollector ( self , f : Callable [ ... , Any ], name_to_path : dict [ str , str ], abs_path : str ) Functions and methods. Attributes function ( Callable[..., Any] ): Target function. hash_ ( str ): Used for HTML id. Args f ( Callable[..., Any] ): Target function. abs_path ( str ): See BaseCollector . name_to_path ( dict[str, str] ): See BaseCollector .","title":"FunctionCollector"},{"location":"api/collectors-py/#FunctionCollector-bases","text":"BaseCollector","title":"Base classes"},{"location":"api/collectors-py/#FunctionCollector-methods","text":"doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations.","title":"Methods"},{"location":"api/collectors-py/#ModuleCollector","text":"class ModuleCollector ( self , mod : ModuleType , out_dir : Union [ str , os . PathLike [ str ]], name_to_path : Optional [ dict [ str , str ]] = None , out_name : Optional [ str ] = None , enable_yaml_header : bool = False ,) Module docs, submodules, classes, functions, and variables. Attributes mod ( ModuleType ): Module to make documents. submodules ( dict[str, ModuleCollector] ): key-value pair of paths and submodules, wrapped by ModuleCollector . variables ( list[VariableCollector] ): list of module-level variables, wrapped by VariableCollector . classes ( list[ClassCollector] ): list of public classes, wrapped by ClassCollector . functions ( list[FunctionCollector] ): list of public functions, wrapped by FunctionCollector . out_dir ( pathlib.Path ): Output directly. filename ( str ): Output filename, like index.md , submodule.md . relpaths ( dict[str, tuple[str, str]] ): Store relational paths. See inari.collectors.ModuleCollector.make_relpaths . enable_yaml_header ( bool ): a flag for deciding whether to include yaml header. Args mod ( ModuleType ): Module to make documents. out_dir ( Union[str, Path] ): Output directory. name_to_path ( dict ): See BaseCollector . out_name ( str ): Output file name. enable_yaml_header ( bool ): a flag for deciding whether to include yaml header.","title":"ModuleCollector"},{"location":"api/collectors-py/#ModuleCollector-bases","text":"BaseCollector","title":"Base classes"},{"location":"api/collectors-py/#ModuleCollector-methods","text":"doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations. init_classes def init_classes ( self ) -> None Find public classes defined in the module. init_functions def init_functions ( self ) -> None Find public functions in the module. init_submodules def init_submodules ( self ) -> None Find submodules. init_vars def init_vars ( self ) -> None Find variables having docstrings. make_links def make_links ( self , doc : str ) -> str Create internal link on back-quoted name. To ignore this, append a space like \"foo.bar \" . make_relpaths def make_relpaths ( self ) -> None Create mapping between object name to relative path. `ful.path.to.mod.cls` -> [ `cls` ](../../mod.md#cls) make_yaml_header def make_yaml_header ( self ) -> str Make yaml header from given values. remove_old_submodules def remove_old_submodules ( self ) -> None Remove documents and collectors of deleted modules. write def write ( self ) -> None Write documents to files. Directories are created automatically.","title":"Methods"},{"location":"api/collectors-py/#VariableCollector","text":"class VariableCollector ( self , var : object , name_to_path : dict [ str , str ], abs_path : str , name : Optional [ str ] = None , doc : Optional [ str ] = None ,) Module variables and class properties. Attributes var : Module-level object or class property, not module/class/function. name ( str ): Name of the object. Args var ( object ): Target object. name_to_path ( dict[str, str] ): See BaseCollector . abs_path ( str ): See BaseCollector . name ( str ): Fallback of var.__name__ . doc ( str ): Fallback of inspect.getdoc(var) .","title":"VariableCollector"},{"location":"api/collectors-py/#VariableCollector-bases","text":"BaseCollector","title":"Base classes"},{"location":"api/collectors-py/#VariableCollector-methods","text":"doc_str def doc_str ( self ) -> str Create documents from its contents. Returns str : Created from docstrings and annotations.","title":"Methods"},{"location":"api/collectors-py/#functions","text":"","title":"Functions"},{"location":"api/collectors-py/#is_var","text":"def is_var ( obj : object ) -> bool Utility for filtering unexpected objects.","title":"is_var"},{"location":"api/mkdocs_plugin-py/","text":"Module inari.mkdocs_plugin \u00b6 Classes \u00b6 Plugin \u00b6 class Plugin () MkDocs Plugin class. Base classes \u00b6 mkdocs.BasePlugin Methods \u00b6 on_config def on_config ( self , config : Config , ** kw : Any ) -> Config on_pre_build def on_pre_build ( self , config : Config ) -> None Build markdown docs from python modules. on_serve def on_serve ( self , server : LiveReloadServer , config : Config , builder : Callable [[], None ], ** kw : Any ) -> LiveReloadServer root_module def root_module ( self , config : Config ) -> ModuleCollector","title":"inari.mkdocs_plugin"},{"location":"api/mkdocs_plugin-py/#module-inarimkdocs_plugin","text":"","title":"Module inari.mkdocs_plugin"},{"location":"api/mkdocs_plugin-py/#classes","text":"","title":"Classes"},{"location":"api/mkdocs_plugin-py/#Plugin","text":"class Plugin () MkDocs Plugin class.","title":"Plugin"},{"location":"api/mkdocs_plugin-py/#Plugin-bases","text":"mkdocs.BasePlugin","title":"Base classes"},{"location":"api/mkdocs_plugin-py/#Plugin-methods","text":"on_config def on_config ( self , config : Config , ** kw : Any ) -> Config on_pre_build def on_pre_build ( self , config : Config ) -> None Build markdown docs from python modules. on_serve def on_serve ( self , server : LiveReloadServer , config : Config , builder : Callable [[], None ], ** kw : Any ) -> LiveReloadServer root_module def root_module ( self , config : Config ) -> ModuleCollector","title":"Methods"}]}